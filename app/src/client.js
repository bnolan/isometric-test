// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  require(["/app/components/jquery/dist/jquery.js", "/app/components/obelisk.js/build/obelisk.js", "/app/components/stats.js/build/stats.min.js"], function(_jquery, _obelisk, _stats) {
    var Renderer;
    $(function() {
      return new Renderer;
    });
    return Renderer = (function() {

      function Renderer() {
        this.tick = __bind(this.tick, this);

        var color, dimension, i, point, _i;
        this.width = $(window).width();
        this.height = $(window).height();
        this.stats = new Stats();
        this.stats.setMode(0);
        this.stats.domElement.style.position = 'absolute';
        this.stats.domElement.style.left = '0px';
        this.stats.domElement.style.top = '0px';
        document.body.appendChild(this.stats.domElement);
        this.canvas = $("<canvas width='" + this.width + "' height='" + this.height + "' style='width: " + this.width + "px; height: " + this.height + "px' />").appendTo('body');
        this.ctx = this.canvas[0].getContext('2d');
        point = new obelisk.Point(200, 200);
        this.pixelView = new obelisk.PixelView(this.canvas, point);
        this.nodes = [];
        dimension = new obelisk.CubeDimension(20, 20, 20);
        color = new obelisk.CubeColor().getByHorizontalColor(obelisk.ColorPattern.PURPLE);
        for (i = _i = 0; _i <= 100; i = ++_i) {
          this.nodes.push({
            x: Math.random(),
            y: Math.random(),
            t: Math.random() * 0xFFFF,
            cube: new obelisk.Cube(dimension, color, true)
          });
        }
        color = new obelisk.SideColor(0x66666677, 0x66666677);
        dimension = new obelisk.CubeDimension(20, 40, 0);
        this.shadow = new obelisk.Brick(dimension, color);
        this.tick();
      }

      Renderer.prototype.renderGrid = function() {
        var HEIGHT, SIZE, WIDTH, brick, colorBG, dimension, i, j, point, _i, _results;
        WIDTH = 10;
        HEIGHT = 10;
        SIZE = 20;
        colorBG = new obelisk.SideColor().getByInnerColor(obelisk.ColorPattern.GRAY);
        dimension = new obelisk.CubeDimension(20, 20, 0);
        _results = [];
        for (i = _i = 0; 0 <= WIDTH ? _i <= WIDTH : _i >= WIDTH; i = 0 <= WIDTH ? ++_i : --_i) {
          _results.push((function() {
            var _j, _results1;
            _results1 = [];
            for (j = _j = 0; 0 <= HEIGHT ? _j <= HEIGHT : _j >= HEIGHT; j = 0 <= HEIGHT ? ++_j : --_j) {
              point = new obelisk.Point3D(i * SIZE, j * SIZE, 0);
              brick = new obelisk.Brick(dimension, colorBG);
              _results1.push(this.pixelView.renderObject(brick, point));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      };

      Renderer.prototype.tick = function() {
        var node, point, t, x, y, _i, _len, _ref;
        this.stats.begin();
        this.ctx.clearRect(0, 0, this.width, this.height);
        _ref = this.nodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          t = (node.t + new Date().getTime()) / 1000.0;
          x = Math.sin(t * node.x) * this.width / 4 + 400;
          y = Math.sin(t * node.y) * this.height / 4;
          point = new obelisk.Point3D(x, y, 0);
          this.pixelView.renderObject(this.shadow, point);
          this.pixelView.renderObject(node.cube, point);
        }
        this.stats.end();
        return requestAnimationFrame(this.tick);
      };

      return Renderer;

    })();
  });

}).call(this);
